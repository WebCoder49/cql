// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.12
// source: protos/cql_result.proto

package cql_result_go_proto

import (
	cql_types_go_proto "github.com/google/cql/protos/cql_types_go_proto"
	date "google.golang.org/genproto/googleapis/type/date"
	timeofday "google.golang.org/genproto/googleapis/type/timeofday"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Date_Precision int32

const (
	Date_PRECISION_UNSPECIFIED Date_Precision = 0
	Date_PRECISION_YEAR        Date_Precision = 1
	Date_PRECISION_MONTH       Date_Precision = 2
	Date_PRECISION_DAY         Date_Precision = 3
)

// Enum value maps for Date_Precision.
var (
	Date_Precision_name = map[int32]string{
		0: "PRECISION_UNSPECIFIED",
		1: "PRECISION_YEAR",
		2: "PRECISION_MONTH",
		3: "PRECISION_DAY",
	}
	Date_Precision_value = map[string]int32{
		"PRECISION_UNSPECIFIED": 0,
		"PRECISION_YEAR":        1,
		"PRECISION_MONTH":       2,
		"PRECISION_DAY":         3,
	}
)

func (x Date_Precision) Enum() *Date_Precision {
	p := new(Date_Precision)
	*p = x
	return p
}

func (x Date_Precision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Date_Precision) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_cql_result_proto_enumTypes[0].Descriptor()
}

func (Date_Precision) Type() protoreflect.EnumType {
	return &file_protos_cql_result_proto_enumTypes[0]
}

func (x Date_Precision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Date_Precision.Descriptor instead.
func (Date_Precision) EnumDescriptor() ([]byte, []int) {
	return file_protos_cql_result_proto_rawDescGZIP(), []int{5, 0}
}

type DateTime_Precision int32

const (
	DateTime_PRECISION_UNSPECIFIED DateTime_Precision = 0
	DateTime_PRECISION_YEAR        DateTime_Precision = 1
	DateTime_PRECISION_MONTH       DateTime_Precision = 2
	DateTime_PRECISION_DAY         DateTime_Precision = 3
	DateTime_PRECISION_HOUR        DateTime_Precision = 4
	DateTime_PRECISION_MINUTE      DateTime_Precision = 5
	DateTime_PRECISION_SECOND      DateTime_Precision = 6
	DateTime_PRECISION_MILLISECOND DateTime_Precision = 7
)

// Enum value maps for DateTime_Precision.
var (
	DateTime_Precision_name = map[int32]string{
		0: "PRECISION_UNSPECIFIED",
		1: "PRECISION_YEAR",
		2: "PRECISION_MONTH",
		3: "PRECISION_DAY",
		4: "PRECISION_HOUR",
		5: "PRECISION_MINUTE",
		6: "PRECISION_SECOND",
		7: "PRECISION_MILLISECOND",
	}
	DateTime_Precision_value = map[string]int32{
		"PRECISION_UNSPECIFIED": 0,
		"PRECISION_YEAR":        1,
		"PRECISION_MONTH":       2,
		"PRECISION_DAY":         3,
		"PRECISION_HOUR":        4,
		"PRECISION_MINUTE":      5,
		"PRECISION_SECOND":      6,
		"PRECISION_MILLISECOND": 7,
	}
)

func (x DateTime_Precision) Enum() *DateTime_Precision {
	p := new(DateTime_Precision)
	*p = x
	return p
}

func (x DateTime_Precision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DateTime_Precision) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_cql_result_proto_enumTypes[1].Descriptor()
}

func (DateTime_Precision) Type() protoreflect.EnumType {
	return &file_protos_cql_result_proto_enumTypes[1]
}

func (x DateTime_Precision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DateTime_Precision.Descriptor instead.
func (DateTime_Precision) EnumDescriptor() ([]byte, []int) {
	return file_protos_cql_result_proto_rawDescGZIP(), []int{6, 0}
}

type Time_Precision int32

const (
	Time_PRECISION_UNSPECIFIED Time_Precision = 0
	Time_PRECISION_HOUR        Time_Precision = 1
	Time_PRECISION_MINUTE      Time_Precision = 2
	Time_PRECISION_SECOND      Time_Precision = 3
	Time_PRECISION_MILLISECOND Time_Precision = 4
)

// Enum value maps for Time_Precision.
var (
	Time_Precision_name = map[int32]string{
		0: "PRECISION_UNSPECIFIED",
		1: "PRECISION_HOUR",
		2: "PRECISION_MINUTE",
		3: "PRECISION_SECOND",
		4: "PRECISION_MILLISECOND",
	}
	Time_Precision_value = map[string]int32{
		"PRECISION_UNSPECIFIED": 0,
		"PRECISION_HOUR":        1,
		"PRECISION_MINUTE":      2,
		"PRECISION_SECOND":      3,
		"PRECISION_MILLISECOND": 4,
	}
)

func (x Time_Precision) Enum() *Time_Precision {
	p := new(Time_Precision)
	*p = x
	return p
}

func (x Time_Precision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Time_Precision) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_cql_result_proto_enumTypes[2].Descriptor()
}

func (Time_Precision) Type() protoreflect.EnumType {
	return &file_protos_cql_result_proto_enumTypes[2]
}

func (x Time_Precision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Time_Precision.Descriptor instead.
func (Time_Precision) EnumDescriptor() ([]byte, []int) {
	return file_protos_cql_result_proto_rawDescGZIP(), []int{7, 0}
}

type Libraries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of CQL libraries that were evaluated.
	Libraries []*Library `protobuf:"bytes,1,rep,name=libraries,proto3" json:"libraries,omitempty"`
}

func (x *Libraries) Reset() {
	*x = Libraries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_cql_result_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Libraries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Libraries) ProtoMessage() {}

func (x *Libraries) ProtoReflect() protoreflect.Message {
	mi := &file_protos_cql_result_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Libraries.ProtoReflect.Descriptor instead.
func (*Libraries) Descriptor() ([]byte, []int) {
	return file_protos_cql_result_proto_rawDescGZIP(), []int{0}
}

func (x *Libraries) GetLibraries() []*Library {
	if x != nil {
		return x.Libraries
	}
	return nil
}

type Library struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Qualified name of the library.
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Version of the library.
	Version *string `protobuf:"bytes,2,opt,name=version,proto3,oneof" json:"version,omitempty"`
	// Maps the named of the expression defintion to the result.
	ExprDefs map[string]*Value `protobuf:"bytes,3,rep,name=expr_defs,json=exprDefs,proto3" json:"expr_defs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Library) Reset() {
	*x = Library{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_cql_result_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Library) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Library) ProtoMessage() {}

func (x *Library) ProtoReflect() protoreflect.Message {
	mi := &file_protos_cql_result_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Library.ProtoReflect.Descriptor instead.
func (*Library) Descriptor() ([]byte, []int) {
	return file_protos_cql_result_proto_rawDescGZIP(), []int{1}
}

func (x *Library) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Library) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *Library) GetExprDefs() map[string]*Value {
	if x != nil {
		return x.ExprDefs
	}
	return nil
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Proto representation of a CQL Value. For CQL nulls the value oneof field
	// will be unset.
	// TODO(b/301606416): Consider supporting typed nulls.
	//
	// Types that are assignable to Value:
	//
	//	*Value_BooleanValue
	//	*Value_StringValue
	//	*Value_IntegerValue
	//	*Value_LongValue
	//	*Value_DecimalValue
	//	*Value_QuantityValue
	//	*Value_RatioValue
	//	*Value_DateValue
	//	*Value_DateTimeValue
	//	*Value_TimeValue
	//	*Value_IntervalValue
	//	*Value_ListValue
	//	*Value_TupleValue
	//	*Value_NamedValue
	//	*Value_CodeSystemValue
	//	*Value_ValueSetValue
	//	*Value_CodeValue
	//	*Value_ConceptValue
	Value isValue_Value `protobuf_oneof:"value"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_cql_result_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_protos_cql_result_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_protos_cql_result_proto_rawDescGZIP(), []int{2}
}

func (m *Value) GetValue() isValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Value) GetBooleanValue() bool {
	if x, ok := x.GetValue().(*Value_BooleanValue); ok {
		return x.BooleanValue
	}
	return false
}

func (x *Value) GetStringValue() string {
	if x, ok := x.GetValue().(*Value_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Value) GetIntegerValue() int32 {
	if x, ok := x.GetValue().(*Value_IntegerValue); ok {
		return x.IntegerValue
	}
	return 0
}

func (x *Value) GetLongValue() int64 {
	if x, ok := x.GetValue().(*Value_LongValue); ok {
		return x.LongValue
	}
	return 0
}

func (x *Value) GetDecimalValue() float64 {
	if x, ok := x.GetValue().(*Value_DecimalValue); ok {
		return x.DecimalValue
	}
	return 0
}

func (x *Value) GetQuantityValue() *Quantity {
	if x, ok := x.GetValue().(*Value_QuantityValue); ok {
		return x.QuantityValue
	}
	return nil
}

func (x *Value) GetRatioValue() *Ratio {
	if x, ok := x.GetValue().(*Value_RatioValue); ok {
		return x.RatioValue
	}
	return nil
}

func (x *Value) GetDateValue() *Date {
	if x, ok := x.GetValue().(*Value_DateValue); ok {
		return x.DateValue
	}
	return nil
}

func (x *Value) GetDateTimeValue() *DateTime {
	if x, ok := x.GetValue().(*Value_DateTimeValue); ok {
		return x.DateTimeValue
	}
	return nil
}

func (x *Value) GetTimeValue() *Time {
	if x, ok := x.GetValue().(*Value_TimeValue); ok {
		return x.TimeValue
	}
	return nil
}

func (x *Value) GetIntervalValue() *Interval {
	if x, ok := x.GetValue().(*Value_IntervalValue); ok {
		return x.IntervalValue
	}
	return nil
}

func (x *Value) GetListValue() *List {
	if x, ok := x.GetValue().(*Value_ListValue); ok {
		return x.ListValue
	}
	return nil
}

func (x *Value) GetTupleValue() *Tuple {
	if x, ok := x.GetValue().(*Value_TupleValue); ok {
		return x.TupleValue
	}
	return nil
}

func (x *Value) GetNamedValue() *Named {
	if x, ok := x.GetValue().(*Value_NamedValue); ok {
		return x.NamedValue
	}
	return nil
}

func (x *Value) GetCodeSystemValue() *CodeSystem {
	if x, ok := x.GetValue().(*Value_CodeSystemValue); ok {
		return x.CodeSystemValue
	}
	return nil
}

func (x *Value) GetValueSetValue() *ValueSet {
	if x, ok := x.GetValue().(*Value_ValueSetValue); ok {
		return x.ValueSetValue
	}
	return nil
}

func (x *Value) GetCodeValue() *Code {
	if x, ok := x.GetValue().(*Value_CodeValue); ok {
		return x.CodeValue
	}
	return nil
}

func (x *Value) GetConceptValue() *Concept {
	if x, ok := x.GetValue().(*Value_ConceptValue); ok {
		return x.ConceptValue
	}
	return nil
}

type isValue_Value interface {
	isValue_Value()
}

type Value_BooleanValue struct {
	BooleanValue bool `protobuf:"varint,1,opt,name=boolean_value,json=booleanValue,proto3,oneof"`
}

type Value_StringValue struct {
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Value_IntegerValue struct {
	IntegerValue int32 `protobuf:"varint,3,opt,name=integer_value,json=integerValue,proto3,oneof"`
}

type Value_LongValue struct {
	LongValue int64 `protobuf:"varint,4,opt,name=long_value,json=longValue,proto3,oneof"`
}

type Value_DecimalValue struct {
	DecimalValue float64 `protobuf:"fixed64,5,opt,name=decimal_value,json=decimalValue,proto3,oneof"`
}

type Value_QuantityValue struct {
	QuantityValue *Quantity `protobuf:"bytes,6,opt,name=quantity_value,json=quantityValue,proto3,oneof"`
}

type Value_RatioValue struct {
	RatioValue *Ratio `protobuf:"bytes,7,opt,name=ratio_value,json=ratioValue,proto3,oneof"`
}

type Value_DateValue struct {
	DateValue *Date `protobuf:"bytes,8,opt,name=date_value,json=dateValue,proto3,oneof"`
}

type Value_DateTimeValue struct {
	DateTimeValue *DateTime `protobuf:"bytes,9,opt,name=date_time_value,json=dateTimeValue,proto3,oneof"`
}

type Value_TimeValue struct {
	TimeValue *Time `protobuf:"bytes,10,opt,name=time_value,json=timeValue,proto3,oneof"`
}

type Value_IntervalValue struct {
	IntervalValue *Interval `protobuf:"bytes,11,opt,name=interval_value,json=intervalValue,proto3,oneof"`
}

type Value_ListValue struct {
	ListValue *List `protobuf:"bytes,12,opt,name=list_value,json=listValue,proto3,oneof"`
}

type Value_TupleValue struct {
	TupleValue *Tuple `protobuf:"bytes,13,opt,name=tuple_value,json=tupleValue,proto3,oneof"`
}

type Value_NamedValue struct {
	NamedValue *Named `protobuf:"bytes,14,opt,name=named_value,json=namedValue,proto3,oneof"`
}

type Value_CodeSystemValue struct {
	CodeSystemValue *CodeSystem `protobuf:"bytes,15,opt,name=code_system_value,json=codeSystemValue,proto3,oneof"`
}

type Value_ValueSetValue struct {
	ValueSetValue *ValueSet `protobuf:"bytes,16,opt,name=value_set_value,json=valueSetValue,proto3,oneof"`
}

type Value_CodeValue struct {
	CodeValue *Code `protobuf:"bytes,17,opt,name=code_value,json=codeValue,proto3,oneof"`
}

type Value_ConceptValue struct {
	ConceptValue *Concept `protobuf:"bytes,18,opt,name=concept_value,json=conceptValue,proto3,oneof"`
}

func (*Value_BooleanValue) isValue_Value() {}

func (*Value_StringValue) isValue_Value() {}

func (*Value_IntegerValue) isValue_Value() {}

func (*Value_LongValue) isValue_Value() {}

func (*Value_DecimalValue) isValue_Value() {}

func (*Value_QuantityValue) isValue_Value() {}

func (*Value_RatioValue) isValue_Value() {}

func (*Value_DateValue) isValue_Value() {}

func (*Value_DateTimeValue) isValue_Value() {}

func (*Value_TimeValue) isValue_Value() {}

func (*Value_IntervalValue) isValue_Value() {}

func (*Value_ListValue) isValue_Value() {}

func (*Value_TupleValue) isValue_Value() {}

func (*Value_NamedValue) isValue_Value() {}

func (*Value_CodeSystemValue) isValue_Value() {}

func (*Value_ValueSetValue) isValue_Value() {}

func (*Value_CodeValue) isValue_Value() {}

func (*Value_ConceptValue) isValue_Value() {}

type Quantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *float64 `protobuf:"fixed64,1,opt,name=value,proto3,oneof" json:"value,omitempty"`
	Unit  *string  `protobuf:"bytes,2,opt,name=unit,proto3,oneof" json:"unit,omitempty"`
}

func (x *Quantity) Reset() {
	*x = Quantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_cql_result_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quantity) ProtoMessage() {}

func (x *Quantity) ProtoReflect() protoreflect.Message {
	mi := &file_protos_cql_result_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quantity.ProtoReflect.Descriptor instead.
func (*Quantity) Descriptor() ([]byte, []int) {
	return file_protos_cql_result_proto_rawDescGZIP(), []int{3}
}

func (x *Quantity) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *Quantity) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

type Ratio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Numerator   *Quantity `protobuf:"bytes,1,opt,name=numerator,proto3,oneof" json:"numerator,omitempty"`
	Denominator *Quantity `protobuf:"bytes,2,opt,name=denominator,proto3,oneof" json:"denominator,omitempty"`
}

func (x *Ratio) Reset() {
	*x = Ratio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_cql_result_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ratio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ratio) ProtoMessage() {}

func (x *Ratio) ProtoReflect() protoreflect.Message {
	mi := &file_protos_cql_result_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ratio.ProtoReflect.Descriptor instead.
func (*Ratio) Descriptor() ([]byte, []int) {
	return file_protos_cql_result_proto_rawDescGZIP(), []int{4}
}

func (x *Ratio) GetNumerator() *Quantity {
	if x != nil {
		return x.Numerator
	}
	return nil
}

func (x *Ratio) GetDenominator() *Quantity {
	if x != nil {
		return x.Denominator
	}
	return nil
}

type Date struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date      *date.Date      `protobuf:"bytes,1,opt,name=date,proto3,oneof" json:"date,omitempty"`
	Precision *Date_Precision `protobuf:"varint,2,opt,name=precision,proto3,enum=google.cql.proto.Date_Precision,oneof" json:"precision,omitempty"`
}

func (x *Date) Reset() {
	*x = Date{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_cql_result_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Date) ProtoMessage() {}

func (x *Date) ProtoReflect() protoreflect.Message {
	mi := &file_protos_cql_result_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Date.ProtoReflect.Descriptor instead.
func (*Date) Descriptor() ([]byte, []int) {
	return file_protos_cql_result_proto_rawDescGZIP(), []int{5}
}

func (x *Date) GetDate() *date.Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Date) GetPrecision() Date_Precision {
	if x != nil && x.Precision != nil {
		return *x.Precision
	}
	return Date_PRECISION_UNSPECIFIED
}

type DateTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3,oneof" json:"date,omitempty"`
	Precision *DateTime_Precision    `protobuf:"varint,2,opt,name=precision,proto3,enum=google.cql.proto.DateTime_Precision,oneof" json:"precision,omitempty"`
}

func (x *DateTime) Reset() {
	*x = DateTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_cql_result_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateTime) ProtoMessage() {}

func (x *DateTime) ProtoReflect() protoreflect.Message {
	mi := &file_protos_cql_result_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateTime.ProtoReflect.Descriptor instead.
func (*DateTime) Descriptor() ([]byte, []int) {
	return file_protos_cql_result_proto_rawDescGZIP(), []int{6}
}

func (x *DateTime) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *DateTime) GetPrecision() DateTime_Precision {
	if x != nil && x.Precision != nil {
		return *x.Precision
	}
	return DateTime_PRECISION_UNSPECIFIED
}

type Time struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date      *timeofday.TimeOfDay `protobuf:"bytes,1,opt,name=date,proto3,oneof" json:"date,omitempty"`
	Precision *Time_Precision      `protobuf:"varint,2,opt,name=precision,proto3,enum=google.cql.proto.Time_Precision,oneof" json:"precision,omitempty"`
}

func (x *Time) Reset() {
	*x = Time{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_cql_result_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Time) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Time) ProtoMessage() {}

func (x *Time) ProtoReflect() protoreflect.Message {
	mi := &file_protos_cql_result_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Time.ProtoReflect.Descriptor instead.
func (*Time) Descriptor() ([]byte, []int) {
	return file_protos_cql_result_proto_rawDescGZIP(), []int{7}
}

func (x *Time) GetDate() *timeofday.TimeOfDay {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Time) GetPrecision() Time_Precision {
	if x != nil && x.Precision != nil {
		return *x.Precision
	}
	return Time_PRECISION_UNSPECIFIED
}

type Interval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Low           *Value `protobuf:"bytes,1,opt,name=low,proto3,oneof" json:"low,omitempty"`
	High          *Value `protobuf:"bytes,2,opt,name=high,proto3,oneof" json:"high,omitempty"`
	LowInclusive  *bool  `protobuf:"varint,3,opt,name=low_inclusive,json=lowInclusive,proto3,oneof" json:"low_inclusive,omitempty"`
	HighInclusive *bool  `protobuf:"varint,4,opt,name=high_inclusive,json=highInclusive,proto3,oneof" json:"high_inclusive,omitempty"`
	// StaticType is used for the RuntimeType of the interval when the interval
	// low and high are null. Otherwise, the RuntimeType can be inferred by
	// inspecting the type of the low and high values.
	// TODO(b/301606416): Remove this field once we support typed nulls.
	StaticType *cql_types_go_proto.IntervalType `protobuf:"bytes,5,opt,name=static_type,json=staticType,proto3,oneof" json:"static_type,omitempty"`
}

func (x *Interval) Reset() {
	*x = Interval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_cql_result_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interval) ProtoMessage() {}

func (x *Interval) ProtoReflect() protoreflect.Message {
	mi := &file_protos_cql_result_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interval.ProtoReflect.Descriptor instead.
func (*Interval) Descriptor() ([]byte, []int) {
	return file_protos_cql_result_proto_rawDescGZIP(), []int{8}
}

func (x *Interval) GetLow() *Value {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *Interval) GetHigh() *Value {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *Interval) GetLowInclusive() bool {
	if x != nil && x.LowInclusive != nil {
		return *x.LowInclusive
	}
	return false
}

func (x *Interval) GetHighInclusive() bool {
	if x != nil && x.HighInclusive != nil {
		return *x.HighInclusive
	}
	return false
}

func (x *Interval) GetStaticType() *cql_types_go_proto.IntervalType {
	if x != nil {
		return x.StaticType
	}
	return nil
}

// List is wrapped in a message because oneof does not support repeated fields.
type List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []*Value `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	// StaticType is used for the RuntimeType of the list when the list is empty.
	// Otherwise, the RuntimeType can be inferred by inspecting the type of each
	// of the elements in the list.
	StaticType *cql_types_go_proto.ListType `protobuf:"bytes,2,opt,name=static_type,json=staticType,proto3,oneof" json:"static_type,omitempty"`
}

func (x *List) Reset() {
	*x = List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_cql_result_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*List) ProtoMessage() {}

func (x *List) ProtoReflect() protoreflect.Message {
	mi := &file_protos_cql_result_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use List.ProtoReflect.Descriptor instead.
func (*List) Descriptor() ([]byte, []int) {
	return file_protos_cql_result_proto_rawDescGZIP(), []int{9}
}

func (x *List) GetValue() []*Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *List) GetStaticType() *cql_types_go_proto.ListType {
	if x != nil {
		return x.StaticType
	}
	return nil
}

// Tuple is wrapped in a message because oneof does not support map fields.
type Tuple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value map[string]*Value `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// RuntimeType could be a tuple type or if this was a Class instance could be
	// the class type (FHIR.Patient, System.Quantity...).
	//
	// Types that are assignable to RuntimeType:
	//
	//	*Tuple_TupleType
	//	*Tuple_NamedType
	RuntimeType isTuple_RuntimeType `protobuf_oneof:"RuntimeType"`
}

func (x *Tuple) Reset() {
	*x = Tuple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_cql_result_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tuple) ProtoMessage() {}

func (x *Tuple) ProtoReflect() protoreflect.Message {
	mi := &file_protos_cql_result_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tuple.ProtoReflect.Descriptor instead.
func (*Tuple) Descriptor() ([]byte, []int) {
	return file_protos_cql_result_proto_rawDescGZIP(), []int{10}
}

func (x *Tuple) GetValue() map[string]*Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (m *Tuple) GetRuntimeType() isTuple_RuntimeType {
	if m != nil {
		return m.RuntimeType
	}
	return nil
}

func (x *Tuple) GetTupleType() *cql_types_go_proto.TupleType {
	if x, ok := x.GetRuntimeType().(*Tuple_TupleType); ok {
		return x.TupleType
	}
	return nil
}

func (x *Tuple) GetNamedType() *cql_types_go_proto.NamedType {
	if x, ok := x.GetRuntimeType().(*Tuple_NamedType); ok {
		return x.NamedType
	}
	return nil
}

type isTuple_RuntimeType interface {
	isTuple_RuntimeType()
}

type Tuple_TupleType struct {
	TupleType *cql_types_go_proto.TupleType `protobuf:"bytes,2,opt,name=tuple_type,json=tupleType,proto3,oneof"`
}

type Tuple_NamedType struct {
	NamedType *cql_types_go_proto.NamedType `protobuf:"bytes,3,opt,name=named_type,json=namedType,proto3,oneof"`
}

func (*Tuple_TupleType) isTuple_RuntimeType() {}

func (*Tuple_NamedType) isTuple_RuntimeType() {}

// Named is the proto representation of a CQL Named type (type defined in the
// data model). google.protobuf.Any should be a type in FHIR Proto, but it hard
// to work with. In the future, we may want to convert this to a map<string,
// Value> simlilar to Tuple.
type Named struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value       *anypb.Any                    `protobuf:"bytes,1,opt,name=value,proto3,oneof" json:"value,omitempty"`
	RuntimeType *cql_types_go_proto.NamedType `protobuf:"bytes,2,opt,name=runtime_type,json=runtimeType,proto3,oneof" json:"runtime_type,omitempty"`
}

func (x *Named) Reset() {
	*x = Named{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_cql_result_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Named) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Named) ProtoMessage() {}

func (x *Named) ProtoReflect() protoreflect.Message {
	mi := &file_protos_cql_result_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Named.ProtoReflect.Descriptor instead.
func (*Named) Descriptor() ([]byte, []int) {
	return file_protos_cql_result_proto_rawDescGZIP(), []int{11}
}

func (x *Named) GetValue() *anypb.Any {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Named) GetRuntimeType() *cql_types_go_proto.NamedType {
	if x != nil {
		return x.RuntimeType
	}
	return nil
}

type CodeSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Version *string `protobuf:"bytes,2,opt,name=version,proto3,oneof" json:"version,omitempty"`
}

func (x *CodeSystem) Reset() {
	*x = CodeSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_cql_result_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystem) ProtoMessage() {}

func (x *CodeSystem) ProtoReflect() protoreflect.Message {
	mi := &file_protos_cql_result_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystem.ProtoReflect.Descriptor instead.
func (*CodeSystem) Descriptor() ([]byte, []int) {
	return file_protos_cql_result_proto_rawDescGZIP(), []int{12}
}

func (x *CodeSystem) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *CodeSystem) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

type ValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *string       `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Version     *string       `protobuf:"bytes,2,opt,name=version,proto3,oneof" json:"version,omitempty"`
	CodeSystems []*CodeSystem `protobuf:"bytes,3,rep,name=code_systems,json=codeSystems,proto3" json:"code_systems,omitempty"`
}

func (x *ValueSet) Reset() {
	*x = ValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_cql_result_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSet) ProtoMessage() {}

func (x *ValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_protos_cql_result_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSet.ProtoReflect.Descriptor instead.
func (*ValueSet) Descriptor() ([]byte, []int) {
	return file_protos_cql_result_proto_rawDescGZIP(), []int{13}
}

func (x *ValueSet) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ValueSet) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *ValueSet) GetCodeSystems() []*CodeSystem {
	if x != nil {
		return x.CodeSystems
	}
	return nil
}

type Concept struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codes   []*Code `protobuf:"bytes,1,rep,name=codes,proto3" json:"codes,omitempty"`
	Display *string `protobuf:"bytes,2,opt,name=display,proto3,oneof" json:"display,omitempty"`
}

func (x *Concept) Reset() {
	*x = Concept{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_cql_result_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Concept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Concept) ProtoMessage() {}

func (x *Concept) ProtoReflect() protoreflect.Message {
	mi := &file_protos_cql_result_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Concept.ProtoReflect.Descriptor instead.
func (*Concept) Descriptor() ([]byte, []int) {
	return file_protos_cql_result_proto_rawDescGZIP(), []int{14}
}

func (x *Concept) GetCodes() []*Code {
	if x != nil {
		return x.Codes
	}
	return nil
}

func (x *Concept) GetDisplay() string {
	if x != nil && x.Display != nil {
		return *x.Display
	}
	return ""
}

type Code struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *string `protobuf:"bytes,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Display *string `protobuf:"bytes,2,opt,name=display,proto3,oneof" json:"display,omitempty"`
	System  *string `protobuf:"bytes,3,opt,name=system,proto3,oneof" json:"system,omitempty"`
	Version *string `protobuf:"bytes,4,opt,name=version,proto3,oneof" json:"version,omitempty"`
}

func (x *Code) Reset() {
	*x = Code{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_cql_result_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Code) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Code) ProtoMessage() {}

func (x *Code) ProtoReflect() protoreflect.Message {
	mi := &file_protos_cql_result_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Code.ProtoReflect.Descriptor instead.
func (*Code) Descriptor() ([]byte, []int) {
	return file_protos_cql_result_proto_rawDescGZIP(), []int{15}
}

func (x *Code) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *Code) GetDisplay() string {
	if x != nil && x.Display != nil {
		return *x.Display
	}
	return ""
}

func (x *Code) GetSystem() string {
	if x != nil && x.System != nil {
		return *x.System
	}
	return ""
}

func (x *Code) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

var File_protos_cql_result_proto protoreflect.FileDescriptor

var file_protos_cql_result_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x71, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x66, 0x64, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x71, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x44, 0x0a, 0x09, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x71,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x52,
	0x09, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0xf2, 0x01, 0x0a, 0x07, 0x4c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x44,
	0x0a, 0x09, 0x65, 0x78, 0x70, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x44, 0x65, 0x66, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x65, 0x78, 0x70, 0x72,
	0x44, 0x65, 0x66, 0x73, 0x1a, 0x54, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x72, 0x44, 0x65, 0x66, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x87, 0x08, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x62, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0c,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a,
	0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a,
	0x0d, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x44,
	0x0a, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x74,
	0x75, 0x70, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x75, 0x70,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x0f,
	0x63, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x44, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x51, 0x0a, 0x08, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x22, 0xa7, 0x01, 0x0a,
	0x05, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x3d, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xf2, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x70,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x48, 0x01, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x22, 0x62, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x15, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x45, 0x43,
	0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x41, 0x59, 0x10, 0x03, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xdf, 0x02, 0x0a, 0x08,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a,
	0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x50, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x22, 0xbd, 0x01, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x59, 0x45, 0x41,
	0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x45, 0x43,
	0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x50,
	0x52, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x04, 0x12,
	0x14, 0x0a, 0x10, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e,
	0x55, 0x54, 0x45, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x50,
	0x52, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x53, 0x45,
	0x43, 0x4f, 0x4e, 0x44, 0x10, 0x07, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x97, 0x02,
	0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x48, 0x00, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x09,
	0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x22, 0x81, 0x01, 0x0a,
	0x09, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52,
	0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x45,
	0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x43,
	0x4f, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x04,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xce, 0x02, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x03, 0x6c, 0x6f,
	0x77, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x04, 0x68,
	0x69, 0x67, 0x68, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52,
	0x0c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0d, 0x68, 0x69, 0x67, 0x68,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x04, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x6f, 0x77, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68,
	0x69, 0x67, 0x68, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x76, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x40, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x9f, 0x02, 0x0a, 0x05, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x75, 0x70, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x75,
	0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x74, 0x75, 0x70, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x1a, 0x51, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x05, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x12, 0x2f,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x43, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x01, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x53, 0x0a, 0x0a, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x92, 0x01, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x22, 0xa6, 0x01,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x34, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x71,
	0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x71, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_cql_result_proto_rawDescOnce sync.Once
	file_protos_cql_result_proto_rawDescData = file_protos_cql_result_proto_rawDesc
)

func file_protos_cql_result_proto_rawDescGZIP() []byte {
	file_protos_cql_result_proto_rawDescOnce.Do(func() {
		file_protos_cql_result_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_cql_result_proto_rawDescData)
	})
	return file_protos_cql_result_proto_rawDescData
}

var file_protos_cql_result_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_protos_cql_result_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_protos_cql_result_proto_goTypes = []interface{}{
	(Date_Precision)(0),                     // 0: google.cql.proto.Date.Precision
	(DateTime_Precision)(0),                 // 1: google.cql.proto.DateTime.Precision
	(Time_Precision)(0),                     // 2: google.cql.proto.Time.Precision
	(*Libraries)(nil),                       // 3: google.cql.proto.Libraries
	(*Library)(nil),                         // 4: google.cql.proto.Library
	(*Value)(nil),                           // 5: google.cql.proto.Value
	(*Quantity)(nil),                        // 6: google.cql.proto.Quantity
	(*Ratio)(nil),                           // 7: google.cql.proto.Ratio
	(*Date)(nil),                            // 8: google.cql.proto.Date
	(*DateTime)(nil),                        // 9: google.cql.proto.DateTime
	(*Time)(nil),                            // 10: google.cql.proto.Time
	(*Interval)(nil),                        // 11: google.cql.proto.Interval
	(*List)(nil),                            // 12: google.cql.proto.List
	(*Tuple)(nil),                           // 13: google.cql.proto.Tuple
	(*Named)(nil),                           // 14: google.cql.proto.Named
	(*CodeSystem)(nil),                      // 15: google.cql.proto.CodeSystem
	(*ValueSet)(nil),                        // 16: google.cql.proto.ValueSet
	(*Concept)(nil),                         // 17: google.cql.proto.Concept
	(*Code)(nil),                            // 18: google.cql.proto.Code
	nil,                                     // 19: google.cql.proto.Library.ExprDefsEntry
	nil,                                     // 20: google.cql.proto.Tuple.ValueEntry
	(*date.Date)(nil),                       // 21: google.type.Date
	(*timestamppb.Timestamp)(nil),           // 22: google.protobuf.Timestamp
	(*timeofday.TimeOfDay)(nil),             // 23: google.type.TimeOfDay
	(*cql_types_go_proto.IntervalType)(nil), // 24: google.cql.proto.IntervalType
	(*cql_types_go_proto.ListType)(nil),     // 25: google.cql.proto.ListType
	(*cql_types_go_proto.TupleType)(nil),    // 26: google.cql.proto.TupleType
	(*cql_types_go_proto.NamedType)(nil),    // 27: google.cql.proto.NamedType
	(*anypb.Any)(nil),                       // 28: google.protobuf.Any
}
var file_protos_cql_result_proto_depIdxs = []int32{
	4,  // 0: google.cql.proto.Libraries.libraries:type_name -> google.cql.proto.Library
	19, // 1: google.cql.proto.Library.expr_defs:type_name -> google.cql.proto.Library.ExprDefsEntry
	6,  // 2: google.cql.proto.Value.quantity_value:type_name -> google.cql.proto.Quantity
	7,  // 3: google.cql.proto.Value.ratio_value:type_name -> google.cql.proto.Ratio
	8,  // 4: google.cql.proto.Value.date_value:type_name -> google.cql.proto.Date
	9,  // 5: google.cql.proto.Value.date_time_value:type_name -> google.cql.proto.DateTime
	10, // 6: google.cql.proto.Value.time_value:type_name -> google.cql.proto.Time
	11, // 7: google.cql.proto.Value.interval_value:type_name -> google.cql.proto.Interval
	12, // 8: google.cql.proto.Value.list_value:type_name -> google.cql.proto.List
	13, // 9: google.cql.proto.Value.tuple_value:type_name -> google.cql.proto.Tuple
	14, // 10: google.cql.proto.Value.named_value:type_name -> google.cql.proto.Named
	15, // 11: google.cql.proto.Value.code_system_value:type_name -> google.cql.proto.CodeSystem
	16, // 12: google.cql.proto.Value.value_set_value:type_name -> google.cql.proto.ValueSet
	18, // 13: google.cql.proto.Value.code_value:type_name -> google.cql.proto.Code
	17, // 14: google.cql.proto.Value.concept_value:type_name -> google.cql.proto.Concept
	6,  // 15: google.cql.proto.Ratio.numerator:type_name -> google.cql.proto.Quantity
	6,  // 16: google.cql.proto.Ratio.denominator:type_name -> google.cql.proto.Quantity
	21, // 17: google.cql.proto.Date.date:type_name -> google.type.Date
	0,  // 18: google.cql.proto.Date.precision:type_name -> google.cql.proto.Date.Precision
	22, // 19: google.cql.proto.DateTime.date:type_name -> google.protobuf.Timestamp
	1,  // 20: google.cql.proto.DateTime.precision:type_name -> google.cql.proto.DateTime.Precision
	23, // 21: google.cql.proto.Time.date:type_name -> google.type.TimeOfDay
	2,  // 22: google.cql.proto.Time.precision:type_name -> google.cql.proto.Time.Precision
	5,  // 23: google.cql.proto.Interval.low:type_name -> google.cql.proto.Value
	5,  // 24: google.cql.proto.Interval.high:type_name -> google.cql.proto.Value
	24, // 25: google.cql.proto.Interval.static_type:type_name -> google.cql.proto.IntervalType
	5,  // 26: google.cql.proto.List.value:type_name -> google.cql.proto.Value
	25, // 27: google.cql.proto.List.static_type:type_name -> google.cql.proto.ListType
	20, // 28: google.cql.proto.Tuple.value:type_name -> google.cql.proto.Tuple.ValueEntry
	26, // 29: google.cql.proto.Tuple.tuple_type:type_name -> google.cql.proto.TupleType
	27, // 30: google.cql.proto.Tuple.named_type:type_name -> google.cql.proto.NamedType
	28, // 31: google.cql.proto.Named.value:type_name -> google.protobuf.Any
	27, // 32: google.cql.proto.Named.runtime_type:type_name -> google.cql.proto.NamedType
	15, // 33: google.cql.proto.ValueSet.code_systems:type_name -> google.cql.proto.CodeSystem
	18, // 34: google.cql.proto.Concept.codes:type_name -> google.cql.proto.Code
	5,  // 35: google.cql.proto.Library.ExprDefsEntry.value:type_name -> google.cql.proto.Value
	5,  // 36: google.cql.proto.Tuple.ValueEntry.value:type_name -> google.cql.proto.Value
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_protos_cql_result_proto_init() }
func file_protos_cql_result_proto_init() {
	if File_protos_cql_result_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_cql_result_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Libraries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_cql_result_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Library); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_cql_result_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_cql_result_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_cql_result_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ratio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_cql_result_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Date); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_cql_result_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_cql_result_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Time); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_cql_result_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_cql_result_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_cql_result_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tuple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_cql_result_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Named); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_cql_result_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_cql_result_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_cql_result_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Concept); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_cql_result_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Code); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_cql_result_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_protos_cql_result_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Value_BooleanValue)(nil),
		(*Value_StringValue)(nil),
		(*Value_IntegerValue)(nil),
		(*Value_LongValue)(nil),
		(*Value_DecimalValue)(nil),
		(*Value_QuantityValue)(nil),
		(*Value_RatioValue)(nil),
		(*Value_DateValue)(nil),
		(*Value_DateTimeValue)(nil),
		(*Value_TimeValue)(nil),
		(*Value_IntervalValue)(nil),
		(*Value_ListValue)(nil),
		(*Value_TupleValue)(nil),
		(*Value_NamedValue)(nil),
		(*Value_CodeSystemValue)(nil),
		(*Value_ValueSetValue)(nil),
		(*Value_CodeValue)(nil),
		(*Value_ConceptValue)(nil),
	}
	file_protos_cql_result_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_protos_cql_result_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_protos_cql_result_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_protos_cql_result_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_protos_cql_result_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_protos_cql_result_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_protos_cql_result_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_protos_cql_result_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*Tuple_TupleType)(nil),
		(*Tuple_NamedType)(nil),
	}
	file_protos_cql_result_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_protos_cql_result_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_protos_cql_result_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_protos_cql_result_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_protos_cql_result_proto_msgTypes[15].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_cql_result_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_cql_result_proto_goTypes,
		DependencyIndexes: file_protos_cql_result_proto_depIdxs,
		EnumInfos:         file_protos_cql_result_proto_enumTypes,
		MessageInfos:      file_protos_cql_result_proto_msgTypes,
	}.Build()
	File_protos_cql_result_proto = out.File
	file_protos_cql_result_proto_rawDesc = nil
	file_protos_cql_result_proto_goTypes = nil
	file_protos_cql_result_proto_depIdxs = nil
}
