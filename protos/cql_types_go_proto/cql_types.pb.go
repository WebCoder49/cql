// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.12
// source: protos/cql_types.proto

package cql_types_go_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SystemType_Type int32

const (
	SystemType_TYPE_UNSPECIFIED SystemType_Type = 0
	SystemType_TYPE_ANY         SystemType_Type = 1
	SystemType_TYPE_STRING      SystemType_Type = 2
	SystemType_TYPE_BOOLEAN     SystemType_Type = 3
	SystemType_TYPE_INTEGER     SystemType_Type = 4
	SystemType_TYPE_LONG        SystemType_Type = 5
	SystemType_TYPE_DECIMAL     SystemType_Type = 6
	SystemType_TYPE_QUANTITY    SystemType_Type = 7
	SystemType_TYPE_RATIO       SystemType_Type = 8
	SystemType_TYPE_DATE        SystemType_Type = 9
	SystemType_TYPE_DATE_TIME   SystemType_Type = 10
	SystemType_TYPE_TIME        SystemType_Type = 11
	SystemType_TYPE_VALUE_SET   SystemType_Type = 12
	SystemType_TYPE_CODE_SYSTEM SystemType_Type = 13
	SystemType_TYPE_VOCABULARY  SystemType_Type = 14
	SystemType_TYPE_CODE        SystemType_Type = 15
	SystemType_TYPE_CONCEPT     SystemType_Type = 16
)

// Enum value maps for SystemType_Type.
var (
	SystemType_Type_name = map[int32]string{
		0:  "TYPE_UNSPECIFIED",
		1:  "TYPE_ANY",
		2:  "TYPE_STRING",
		3:  "TYPE_BOOLEAN",
		4:  "TYPE_INTEGER",
		5:  "TYPE_LONG",
		6:  "TYPE_DECIMAL",
		7:  "TYPE_QUANTITY",
		8:  "TYPE_RATIO",
		9:  "TYPE_DATE",
		10: "TYPE_DATE_TIME",
		11: "TYPE_TIME",
		12: "TYPE_VALUE_SET",
		13: "TYPE_CODE_SYSTEM",
		14: "TYPE_VOCABULARY",
		15: "TYPE_CODE",
		16: "TYPE_CONCEPT",
	}
	SystemType_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_ANY":         1,
		"TYPE_STRING":      2,
		"TYPE_BOOLEAN":     3,
		"TYPE_INTEGER":     4,
		"TYPE_LONG":        5,
		"TYPE_DECIMAL":     6,
		"TYPE_QUANTITY":    7,
		"TYPE_RATIO":       8,
		"TYPE_DATE":        9,
		"TYPE_DATE_TIME":   10,
		"TYPE_TIME":        11,
		"TYPE_VALUE_SET":   12,
		"TYPE_CODE_SYSTEM": 13,
		"TYPE_VOCABULARY":  14,
		"TYPE_CODE":        15,
		"TYPE_CONCEPT":     16,
	}
)

func (x SystemType_Type) Enum() *SystemType_Type {
	p := new(SystemType_Type)
	*p = x
	return p
}

func (x SystemType_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SystemType_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_cql_types_proto_enumTypes[0].Descriptor()
}

func (SystemType_Type) Type() protoreflect.EnumType {
	return &file_protos_cql_types_proto_enumTypes[0]
}

func (x SystemType_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SystemType_Type.Descriptor instead.
func (SystemType_Type) EnumDescriptor() ([]byte, []int) {
	return file_protos_cql_types_proto_rawDescGZIP(), []int{1, 0}
}

type CQLType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*CQLType_SystemType
	//	*CQLType_NamedType
	//	*CQLType_IntervalType
	//	*CQLType_ListType
	//	*CQLType_ChoiceType
	//	*CQLType_TupleType
	Type isCQLType_Type `protobuf_oneof:"type"`
}

func (x *CQLType) Reset() {
	*x = CQLType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_cql_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CQLType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CQLType) ProtoMessage() {}

func (x *CQLType) ProtoReflect() protoreflect.Message {
	mi := &file_protos_cql_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CQLType.ProtoReflect.Descriptor instead.
func (*CQLType) Descriptor() ([]byte, []int) {
	return file_protos_cql_types_proto_rawDescGZIP(), []int{0}
}

func (m *CQLType) GetType() isCQLType_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *CQLType) GetSystemType() *SystemType {
	if x, ok := x.GetType().(*CQLType_SystemType); ok {
		return x.SystemType
	}
	return nil
}

func (x *CQLType) GetNamedType() *NamedType {
	if x, ok := x.GetType().(*CQLType_NamedType); ok {
		return x.NamedType
	}
	return nil
}

func (x *CQLType) GetIntervalType() *IntervalType {
	if x, ok := x.GetType().(*CQLType_IntervalType); ok {
		return x.IntervalType
	}
	return nil
}

func (x *CQLType) GetListType() *ListType {
	if x, ok := x.GetType().(*CQLType_ListType); ok {
		return x.ListType
	}
	return nil
}

func (x *CQLType) GetChoiceType() *ChoiceType {
	if x, ok := x.GetType().(*CQLType_ChoiceType); ok {
		return x.ChoiceType
	}
	return nil
}

func (x *CQLType) GetTupleType() *TupleType {
	if x, ok := x.GetType().(*CQLType_TupleType); ok {
		return x.TupleType
	}
	return nil
}

type isCQLType_Type interface {
	isCQLType_Type()
}

type CQLType_SystemType struct {
	SystemType *SystemType `protobuf:"bytes,1,opt,name=system_type,json=systemType,proto3,oneof"`
}

type CQLType_NamedType struct {
	NamedType *NamedType `protobuf:"bytes,2,opt,name=named_type,json=namedType,proto3,oneof"`
}

type CQLType_IntervalType struct {
	IntervalType *IntervalType `protobuf:"bytes,3,opt,name=interval_type,json=intervalType,proto3,oneof"`
}

type CQLType_ListType struct {
	ListType *ListType `protobuf:"bytes,4,opt,name=list_type,json=listType,proto3,oneof"`
}

type CQLType_ChoiceType struct {
	ChoiceType *ChoiceType `protobuf:"bytes,5,opt,name=choice_type,json=choiceType,proto3,oneof"`
}

type CQLType_TupleType struct {
	TupleType *TupleType `protobuf:"bytes,6,opt,name=tuple_type,json=tupleType,proto3,oneof"`
}

func (*CQLType_SystemType) isCQLType_Type() {}

func (*CQLType_NamedType) isCQLType_Type() {}

func (*CQLType_IntervalType) isCQLType_Type() {}

func (*CQLType_ListType) isCQLType_Type() {}

func (*CQLType_ChoiceType) isCQLType_Type() {}

func (*CQLType_TupleType) isCQLType_Type() {}

type SystemType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *SystemType_Type `protobuf:"varint,1,opt,name=type,proto3,enum=google.cql.proto.SystemType_Type,oneof" json:"type,omitempty"`
}

func (x *SystemType) Reset() {
	*x = SystemType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_cql_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemType) ProtoMessage() {}

func (x *SystemType) ProtoReflect() protoreflect.Message {
	mi := &file_protos_cql_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemType.ProtoReflect.Descriptor instead.
func (*SystemType) Descriptor() ([]byte, []int) {
	return file_protos_cql_types_proto_rawDescGZIP(), []int{1}
}

func (x *SystemType) GetType() SystemType_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return SystemType_TYPE_UNSPECIFIED
}

type NamedType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The fully qualified name of the type such as FHIR.EnrollmentResponseStatus
	// or System.Integer.
	TypeName *string `protobuf:"bytes,1,opt,name=type_name,json=typeName,proto3,oneof" json:"type_name,omitempty"`
}

func (x *NamedType) Reset() {
	*x = NamedType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_cql_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamedType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedType) ProtoMessage() {}

func (x *NamedType) ProtoReflect() protoreflect.Message {
	mi := &file_protos_cql_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedType.ProtoReflect.Descriptor instead.
func (*NamedType) Descriptor() ([]byte, []int) {
	return file_protos_cql_types_proto_rawDescGZIP(), []int{2}
}

func (x *NamedType) GetTypeName() string {
	if x != nil && x.TypeName != nil {
		return *x.TypeName
	}
	return ""
}

type IntervalType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointType *CQLType `protobuf:"bytes,1,opt,name=point_type,json=pointType,proto3,oneof" json:"point_type,omitempty"`
}

func (x *IntervalType) Reset() {
	*x = IntervalType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_cql_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalType) ProtoMessage() {}

func (x *IntervalType) ProtoReflect() protoreflect.Message {
	mi := &file_protos_cql_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalType.ProtoReflect.Descriptor instead.
func (*IntervalType) Descriptor() ([]byte, []int) {
	return file_protos_cql_types_proto_rawDescGZIP(), []int{3}
}

func (x *IntervalType) GetPointType() *CQLType {
	if x != nil {
		return x.PointType
	}
	return nil
}

type ListType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementType *CQLType `protobuf:"bytes,1,opt,name=element_type,json=elementType,proto3,oneof" json:"element_type,omitempty"`
}

func (x *ListType) Reset() {
	*x = ListType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_cql_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListType) ProtoMessage() {}

func (x *ListType) ProtoReflect() protoreflect.Message {
	mi := &file_protos_cql_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListType.ProtoReflect.Descriptor instead.
func (*ListType) Descriptor() ([]byte, []int) {
	return file_protos_cql_types_proto_rawDescGZIP(), []int{4}
}

func (x *ListType) GetElementType() *CQLType {
	if x != nil {
		return x.ElementType
	}
	return nil
}

type ChoiceType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChoiceTypes []*CQLType `protobuf:"bytes,1,rep,name=choice_types,json=choiceTypes,proto3" json:"choice_types,omitempty"`
}

func (x *ChoiceType) Reset() {
	*x = ChoiceType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_cql_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChoiceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChoiceType) ProtoMessage() {}

func (x *ChoiceType) ProtoReflect() protoreflect.Message {
	mi := &file_protos_cql_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChoiceType.ProtoReflect.Descriptor instead.
func (*ChoiceType) Descriptor() ([]byte, []int) {
	return file_protos_cql_types_proto_rawDescGZIP(), []int{5}
}

func (x *ChoiceType) GetChoiceTypes() []*CQLType {
	if x != nil {
		return x.ChoiceTypes
	}
	return nil
}

type TupleType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maps the element name to the type of the element.
	ElementTypes map[string]*CQLType `protobuf:"bytes,1,rep,name=element_types,json=elementTypes,proto3" json:"element_types,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TupleType) Reset() {
	*x = TupleType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_cql_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TupleType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TupleType) ProtoMessage() {}

func (x *TupleType) ProtoReflect() protoreflect.Message {
	mi := &file_protos_cql_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TupleType.ProtoReflect.Descriptor instead.
func (*TupleType) Descriptor() ([]byte, []int) {
	return file_protos_cql_types_proto_rawDescGZIP(), []int{6}
}

func (x *TupleType) GetElementTypes() map[string]*CQLType {
	if x != nil {
		return x.ElementTypes
	}
	return nil
}

var File_protos_cql_types_proto protoreflect.FileDescriptor

var file_protos_cql_types_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x71, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x03, 0x0a, 0x07, 0x43,
	0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0c,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x09,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6c,
	0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x74, 0x75, 0x70, 0x6c,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x75, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x74, 0x75, 0x70,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x89,
	0x03, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x22, 0xb5, 0x02, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x07, 0x12,
	0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x10, 0x08, 0x12,
	0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x09, 0x12, 0x12,
	0x0a, 0x0e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10,
	0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x53, 0x45, 0x54, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f, 0x43, 0x41, 0x42, 0x55, 0x4c, 0x41, 0x52, 0x59, 0x10, 0x0e,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x0f, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x50, 0x54, 0x10,
	0x10, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3b, 0x0a, 0x09, 0x4e, 0x61,
	0x6d, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x79,
	0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5c, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5e, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x41, 0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x51, 0x4c, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4a, 0x0a, 0x0a, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x51, 0x4c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x22, 0xbb, 0x01, 0x0a, 0x09, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x52, 0x0a, 0x0d, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x1a, 0x5a, 0x0a, 0x11, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x51, 0x4c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x33, 0x50, 0x01, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x71, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x63, 0x71, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x67, 0x6f, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_cql_types_proto_rawDescOnce sync.Once
	file_protos_cql_types_proto_rawDescData = file_protos_cql_types_proto_rawDesc
)

func file_protos_cql_types_proto_rawDescGZIP() []byte {
	file_protos_cql_types_proto_rawDescOnce.Do(func() {
		file_protos_cql_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_cql_types_proto_rawDescData)
	})
	return file_protos_cql_types_proto_rawDescData
}

var file_protos_cql_types_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protos_cql_types_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_protos_cql_types_proto_goTypes = []interface{}{
	(SystemType_Type)(0), // 0: google.cql.proto.SystemType.Type
	(*CQLType)(nil),      // 1: google.cql.proto.CQLType
	(*SystemType)(nil),   // 2: google.cql.proto.SystemType
	(*NamedType)(nil),    // 3: google.cql.proto.NamedType
	(*IntervalType)(nil), // 4: google.cql.proto.IntervalType
	(*ListType)(nil),     // 5: google.cql.proto.ListType
	(*ChoiceType)(nil),   // 6: google.cql.proto.ChoiceType
	(*TupleType)(nil),    // 7: google.cql.proto.TupleType
	nil,                  // 8: google.cql.proto.TupleType.ElementTypesEntry
}
var file_protos_cql_types_proto_depIdxs = []int32{
	2,  // 0: google.cql.proto.CQLType.system_type:type_name -> google.cql.proto.SystemType
	3,  // 1: google.cql.proto.CQLType.named_type:type_name -> google.cql.proto.NamedType
	4,  // 2: google.cql.proto.CQLType.interval_type:type_name -> google.cql.proto.IntervalType
	5,  // 3: google.cql.proto.CQLType.list_type:type_name -> google.cql.proto.ListType
	6,  // 4: google.cql.proto.CQLType.choice_type:type_name -> google.cql.proto.ChoiceType
	7,  // 5: google.cql.proto.CQLType.tuple_type:type_name -> google.cql.proto.TupleType
	0,  // 6: google.cql.proto.SystemType.type:type_name -> google.cql.proto.SystemType.Type
	1,  // 7: google.cql.proto.IntervalType.point_type:type_name -> google.cql.proto.CQLType
	1,  // 8: google.cql.proto.ListType.element_type:type_name -> google.cql.proto.CQLType
	1,  // 9: google.cql.proto.ChoiceType.choice_types:type_name -> google.cql.proto.CQLType
	8,  // 10: google.cql.proto.TupleType.element_types:type_name -> google.cql.proto.TupleType.ElementTypesEntry
	1,  // 11: google.cql.proto.TupleType.ElementTypesEntry.value:type_name -> google.cql.proto.CQLType
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_protos_cql_types_proto_init() }
func file_protos_cql_types_proto_init() {
	if File_protos_cql_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_cql_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CQLType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_cql_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_cql_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamedType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_cql_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_cql_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_cql_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChoiceType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_cql_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TupleType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_cql_types_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*CQLType_SystemType)(nil),
		(*CQLType_NamedType)(nil),
		(*CQLType_IntervalType)(nil),
		(*CQLType_ListType)(nil),
		(*CQLType_ChoiceType)(nil),
		(*CQLType_TupleType)(nil),
	}
	file_protos_cql_types_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_protos_cql_types_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_protos_cql_types_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_protos_cql_types_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_cql_types_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_cql_types_proto_goTypes,
		DependencyIndexes: file_protos_cql_types_proto_depIdxs,
		EnumInfos:         file_protos_cql_types_proto_enumTypes,
		MessageInfos:      file_protos_cql_types_proto_msgTypes,
	}.Build()
	File_protos_cql_types_proto = out.File
	file_protos_cql_types_proto_rawDesc = nil
	file_protos_cql_types_proto_goTypes = nil
	file_protos_cql_types_proto_depIdxs = nil
}
